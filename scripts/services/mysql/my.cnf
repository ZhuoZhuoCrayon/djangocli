# MySQL 部分配置及解释

# The following options will be passed to all MySQL clients
[client]
# 客户端监听端口
port=20712

# 设置默认字符集
default-character-set=utf8mb4

# 用于本地链接的套接字
# socket=/apps/mysql/lock/mysql.sock

# -------------------------------------------------------------------------------------------------

# The MySQL server
# MariaDB 在 /etc/my.cnf.d/mariadb-server.cnf 设定有部分默认值
[mysqld]

# 服务端监听端口
port=20712

# 设置默认字符集
collation-server = utf8mb4_unicode_ci
init-connect='SET NAMES utf8mb4'
character-set-server = utf8mb4

# 为mysql客户端程序和服务器之间的本地通讯指定一个套接字文件
# in mariadb: /var/lib/mysql/mysql.sock
# socket=/apps/mysql/lock/mysql.sock

# mysql 安装目录
# basedir=/apps/mysql

# 数据文件存放目录
# in mariadb: /var/lib/mysql
# datadir=/apps/mysql/data

# pid 所在的目录
# in mariadb: /run/mariadb/mariadb.pid
# pid-file=/apps/mysql/run/mysql.pid

# 错误日志文件
# in mariadb: /var/log/mariadb/mariadb.log
# log-error=/apps/mysql/logs/mysql-error.log

# mysql启动用户
# user=mysql

# 监听的IPV4地址，注释 或者 改为0.0.0.0 表示允许所有远程链接
# bind-address=127.0.0.1

# 跳过主机名解析
# skip_name_resolve=1

# mysql选项以避免外部锁定。该选项默认开启。不使用系统锁定，要使用myisamchk,必须关闭服务器
# skip-external-locking

# 用于缓存MyISAM存储引擎的索引参数，增加可得到更好处理的索引(对所有读和多重写)。默认为InnoDB存储引擎，该参数可以设置小点，64M即可。
# 系统将开始换页并且真的变慢：对于内存在4GB左右的服务器，该参数可设置为384M或512M，该参数值设置过大可能会导致服务器整体效率降低
# 通过检查状态值Key_read_requests 和 Key_reads 判断 key_buffer_size 是否设置合理
# key_reads / key_read_requests 的值应该尽量低，一般来说在 1/100 - 1/1000 范围内即可
# 上述状态值可以使用 SHOW STATUS LIKE 'key_read%'获得
# key_buffer_size=384M

# 允许最大接收数据包的大小，防止服务器发送过大的数据包
# 增大该值十分安全，因为仅当需要时才会分配额外内存。例如发出长查询或 mysqld 必须返回大量数据时 mysqld 才会分配更多内存
# 该变量取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。
max_allowed_packet=128M

# MySQL 每打开一个表，都会读入一部分数据到 table_open_cache 缓存中
# 当 MySQL 在缓存中找不到相应信息时，才会去磁盘上读取，默认值64
# 假定系统有 200 个并发连接，则推荐将此参数设置为 200*N (N 为每个连接所需的文件描述符数目)
# 当 table_open_cache 值过大时，如果系统处理不了那么多文件描述符，可能会出现客户端失效，连接不上
# table_open_cache=512

# 当 MySQL 主线程短时间内得到非常多的连接请求，该配置将起作用，
# 主线程花费极短的时间检查连接并启动一个新线程，back_log 值指出在 MySQL 暂时停止响应新请求之前的时间间隔内，back_log 个请求可以被暂存在堆栈中
# 需要提高该值当期望在短时间内处理大量连接。如果 MySQL 的连接数据达到 max_connections 时，新来的请求将会被存在堆栈中，等待某一连接释放资源
# 该堆栈的数量即 back_log，如果等待连接的数量超过 back_log ，将不允许授权连接资源。
# back_log 受限于操作系统对 TCP/IP 连接的侦听队列的大小。
# 操作系统在这个队列大小上也有限制（可以检查文档找出这个变量的最大值），设定 back_log 高于操作系统的限制是无效的
# back_log=600

# MySQL执行排序使用的缓冲大小。如果想要提高 ORDER BY 的速度，首先尝试是否让MySQL使用索引而不是额外的排序字段
# 如果不能使用索引，可以尝试增加 sort_buffer_size 变量的大小，默认为 256k
# 如果出现 Using filesort 的时候，要通过增加索引来解决
# sort_buffer_size = 8M

# 该参数用于表的顺序扫描，表示每个线程分配的缓冲区大小。
# 比如在进行全表扫描时，MySQL 会按数据的存储顺序依次读取数据块，每次读取的数据块首先会暂存在 read_buffer 中
# 当 buffer 空间被写满或者全部数据读取结束后，再将buffer中的数据返回给上层调用者，以提高效率。默认为128K
# 这个参数不要设置过大，一般在128～256之间。如果对表的顺序扫描请求非常频繁，并且评估频繁扫描效率过低，可以通过增加该变量值以及内存缓冲区大小提高其性能
# read_buffer_size = 128K

# 该参数用于表的随机读取，表示每个线程分配的缓冲区大小。比如按照一个非索引字段做 order by 排序操作时，就会利用这个缓冲区来暂存读取的数据。
# 默认为256KB，这个参数不要设置过大，一般在 128～512KB
# mysql 会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。
# MySQL会为每个客户端连接分配该缓冲空间，设置该值要避免刷爆内存
# read_rnd_buffer_size = 8M

# 在 REPAIR TABLE 期间对 MyISAM 索引进行排序，或者使用 CREATE INDEX 或 ALTER TABLE 创建索引时所分配的缓冲区大小。
# myisam_sort_buffer_size = 64M

# 在 REPAIR TABLE / ALTER TABLE / LOAD DATA 重建索引过程中，MySQL 允许的最大临时文件大小
# 如果 MyISAM 索引文件超出此大小和磁盘空间可用，则增加值可能有助于性能。 必须在包含原始索引文件所在的目录的文件系统中使用该空间。
# myisam_max_sort_file_size = 10G

# 如果该值大于1，在  Repair by sorting 过程中将并行创建表索引
# myisam_repair_threads = 1

# 可供客户端连接的线程缓存数量
# thread_cache_size = 64

# 为缓存查询结果分配的内存量。
# 从 MySQL 5.7.20 开始不推荐使用查询缓存，并在 MySQL 8.0 中删除。弃用包括 query_cache_size.
# query_cache_size = 32M

# 缓存结果限制，大于该大小的结果将不被缓存
# 从 MySQL 5.7.20 开始不推荐使用查询缓存，并在 MySQL 8.0 中删除。弃用包括 query_cache_size.
# query_cache_limit = 2M

# 内存临时表的最大占用空间，临时表受限于 tmp_table_size & max_heap_table_size 的最小值
# 当内存临表超出限制，数据将落到磁盘临时表，internal_tmp_disk_storage_engine 定义了磁盘内部临时表的存储引擎
# 如果有使用 group by 占用数据量大的情况，可以适当提高该值
# tmp_table_size = 64M

# 在 plain index scans, range index scans, join 等没有使用索引或全表扫描的最小可用缓冲区，一般来说，要快速完成 join 的最好方式是加索引
# 增加该值可用提高 full join （没有正确运用缓存）的效率
# 该缓冲区为每一个连接分配，最好保持全局较小的值，对于某些特定的连接开放大值，如果全局的设置大于大多数查询所需的内存，会浪费内存资源
# 默认为 256KB，最大值为 4GB - 1
# join_buffer_size = 64M


# 该值一般建议设定cpu的个数 * 2
# thread_concurrency = 4

# 分词词汇最小长度，默认值为4
# ft_min_word_len = 4

# 是否显示默认时间戳，true是显示
# explicit_defaults_for_timestamp = true

# 是否允许服务器的 TCP/IP 连接，默认是禁用的（允许 TCP 连接）
# 如果启用该值，服务器仅允许本地的连接并且于mysqld的交互必须使用命名管道（named pipes）或者共享内存（shared memory）或者 Unix socket files
# 该值推荐仅在本地连接的MySQL服务端启用
# skip-networking

# 允许客户端同时连接的数量，默认值为 1，最大为 100000
# max_connections = 1000

# 主机连续连接 max_connect_errors 次没有成功连接时，服务器将阻止继续尝试连接，当连接成功时，该错误计数清0，默认值100
# max_connect_errors = 1000

# mysqld 在操作系统中可用的文件描述符的数量，会基于系统启动时指定，如果操作系统的限制为 Infinity，会使用默认值 5000，自行设定参考如下：
# 10 + max_connections + (table_open_cache * 2) or max_connections * 5
# open_files_limit = 65535

# 事务隔离级别，默认为可重复读
# transaction_isolation = REPEATABLE-READ

# 事务在没有提交的时产生的日志会记录到Cache中，等到事务提交需要提交的时候，则把日志持久化到磁盘。该值默认大小32K，可以自行设定。
# binlog_cache_size = 64M

# 此变量设置允许用户创建的内存表的最大值，该值的设置不影响已存在的 MEMORY table，除非 CREATE / ALTER / TRUNCATE
# max_heap_table_size = 8M

# 表示是本机的序号为1,给服务器分配一个独一无二的ID编号; n的取值范围是 1 ~2^32 次方启用二进制日志功能
# 在复制数据同步的时候会用到，一般来讲就是master的意思
# server-id = 1


# 默认的存储引擎
# default_storage_engine = InnoDB


# 启用时，InnoDB 为独立表空间模式，每个数据库的每个表都会生成一个数据空间，当删除或截断一个数据库表时，你也可以回收未使用的空间
# 独立表空间优点：
# 1．每个表都有自已独立的表空间
# 2．每个表的数据和索引都会存在自已的表空间中
# 3．可以实现单表在不同的数据库中移动。
# 4．空间可以回收（除drop table操作处，表空不能自已回收）
# 缺点：
# 1. 单表增加过大，如超过100G
# 结论：
# 共享表空间在 Insert 操作上略有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files
# innodb_file_per_table = 1


# InnoDB系统表空间数据文件目录路径的公共部分。默认值为MySQL数据目录
# innodb_data_home_dir = /apps/mysql/data

# 为 InnoDB 的表空间数据文件定义 名称（name），size（大小），attributes（属性）
# 如果没有定义该值，将会创建一个自动扩展的数据文件，
# innodb_data_file_path = ibdata1:10M:autoextend

# InnoDB redo log 的目录，数据由  innodb_log_files_in_group 定义
# 如果没有定义该路径，将在 MySQL的数据目录下创建 ib_logfile0 ib_logfile1，日志文件大小由  innodb_log_file_size 定义
# innodb_log_group_home_dir = /apps/mysql/logs/


# 缓冲区大小，该缓冲区用于缓存表及索引，默认 128M，可以设置为 80% 物理内存
# 当缓冲池的大小大于1GB时，将innodb_buffer_pool_instances的值设置为大于1可以在繁忙的服务器上提高可伸缩性
# 当您增加或减少缓冲池大小时，操作是按块执行的。块大小由innodb_buffer_pool_chunk_size 变量定义 ，默认值为 128 MB。
# 缓冲池大小是 innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances 的倍数，如果设置不准确，会自动调整为上述的倍数
# innodb_buffer_pool_size = 4G

# 写操作IO线程数，默认值是 4， 1 ～ 64
# innodb_write_io_threads = 4

# 同上
# # innodb_read_io_threads = 4

# 允许的最大线程数 InnoDB。值 0（默认值）被解释为无限并发（无限制）
# innodb_thread_concurrency = 0

# 专用于 InnoDB 清除操作的后台线程数，增加该值会创建额外的清除线程，这可以提高对多个表执行DML操作的系统的效率
# innodb_purge_threads = 1

# 在 log group 中的 log file 的大小，innodb_log_file_size * innodb_log_files_in_group < 512GB
# innodb_log_file_size = 1G

# 一个 log group 中 log file 的数量
# innodb_log_files_in_group = 3

# 刷新缓冲池使得 dirty page 的不超过的比例，0 ～ 99.99 默认值为75
# innodb_max_dirty_pages_pct = 90

# 启用时，InnoDB 将报错而不是异常提示
# innodb_strict_mode = 0

# InnoDB 用于写入磁盘日志文件的缓冲区的大小(以字节为单位)
# innodb_log_buffer_size = 64M

# 控制 提交操作严格遵从ACID & 重新编排并批量执行提交相关的I/O操作 之间的关系，从而提高性能
# 可以通过更改默认值来获得更好的性能，但可能在崩溃时丢失事务
# 1：默认值，完全遵从ACID，在每次事务提交时，日志被写入并刷新到磁盘
# 0：每秒写入并刷新到磁盘一次，崩溃中未刷新的日志所描述的事务可能会丢失
# 2：在每个事务提交后写入日志，并每秒刷新一次磁盘。未刷新日志所描述的事务可能在崩溃中丢失
# innodb_flush_log_at_trx_commit = 1

# InnoDB 事务在放弃之前等待行锁的时间长度（以秒为单位），默认值为 50 秒
# innodb_lock_wait_timeout = 50


# -------------------------------------------------------------------------------------------------

[mysqldump]

# 对占用空间大的表非常有用，强制 mysqldump 每次从服务器检索表的一行，而不是检索整个行集放入内存缓冲区等待写入
quick
max_allowed_packet = 128M


# -------------------------------------------------------------------------------------------------

[mysql]
# 设置默认字符集
default-character-set=utf8mb4
