# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Release Version

on:
  push:
    branches:
      - 0.5.x-rc

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # 构建环境的Python版本
      PYTHON_VERSION: "3.7"
      # 主分支
      MAIN_BRANCH: "0.5.x-rc"
      # yaml中版本的描述路径
      VERSION_KW_P: "appVersion"
      # github 提交用户名
      GITHUB_USERNAME: "github-actions"
      # 描述app的yaml文件
      APP_DESC_YAML: ".helm/Chart.yaml"
      # 开发日志所在目录
      DEV_LOG_ROOT: "djangocli/docs/dev_log"
      # 发布日志所在目录
      RELEASE_LOG_ROOT: "djangocli/docs/release"
      # tag 名称前缀
      TAG_NAME_PREFIX: ""
      # release 名称前缀
      RELEASE_NAME_PREFIX: ""
      # 开发分支名称后缀
      DEV_BRANCH_SUFFIX: "rc"

    steps:
    - id: checkout
      name: Checkout
      uses: actions/checkout@v2

    - id: set-up-python
      name: Set up Python {{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - id: install-requirements
      name: Install Requirements
      run: |
        pip install PyYAML
        pip install packaging
        pip install ruamel.yaml

    - id: generate-dev-log
      name: Generate Dev Log
      run: |
        # 获取当前版本
        latest_version=$( python scripts/utils/op_yaml.py -f ${{ env.APP_DESC_YAML }} --keyword-path ${{ env.VERSION_KW_P }} --op get )
        echo "🔥 latest_version -> $latest_version"

        # 获取并更新发布日志
        release_log=$( python scripts/workflows/release/upgrade_release_log.py -d ${{ env.DEV_LOG_ROOT }} -r ${{ env.RELEASE_LOG_ROOT }} )
        echo "📒 release_log -> 👇👇👇 $release_log"

        # 找出 dev_log 最后活跃的版本号，该版本号为预发布版本
        prerelease_version=$( python scripts/workflows/release/get_prerelease_version.py -d ${{ env.DEV_LOG_ROOT }} )
        echo "🚀 prerelease_version -> $prerelease_version"
        # 将 APP_DESC_YAML 中的版本更新为预发布版本
        python scripts/utils/op_yaml.py -f ${{ env.APP_DESC_YAML }} --keyword-path ${{ env.VERSION_KW_P }} --op set --value "$prerelease_version"

        # 推送发布日志
        git config --global user.email "${{ env.GITHUB_USERNAME }}@users.noreply.github.com"
        git config --global user.name "${{ env.GITHUB_USERNAME }}"
        git add .
        git commit -m "docs: auto generate $prerelease_version release log"
        git push origin ${{ env.MAIN_BRANCH }}
        echo "✨️ main branch -> ${{ env.MAIN_BRANCH }} has been updated"

        # 设置输出
        echo "::set-output name=release_log::$(echo $release_log)"
        echo "::set-output name=latest_version::$(echo $latest_version)"
        echo "::set-output name=prerelease_version::$(echo $prerelease_version)"

    - id: create-tag
      name: Create Tag
      run: |
        # 从上个步骤获取预发布版本号，拼接为标签名称
        tag_name=$( echo "${{ env.TAG_NAME_PREFIX }}${{ steps.generate-dev-log.outputs.prerelease_version }}" )
        release_log=$( echo "${{ steps.generate-dev-log.outputs.release_log }}" )
        echo "🏷️ tag -> $tag_name will be created"

        # 创建并推送标签
        # --cleanup=verbatim 修改默认的注释清理模式，保持完整的提交信息，默认的模式会将 # 开头的信息视为注释行
        # 参考：https://stackoverflow.com/questions/2788092/start-a-git-commit-message-with-a-hashmark
        # 参考：https://git.kernel.org/pub/scm/git/git.git/plain/Documentation/git-commit.txt
        git tag -a "$tag_name" -m "$release_log" --cleanup=verbatim
        git push origin "$tag_name"
        echo "✨️ tag -> $tag_name has been created"

        # 输出 tag_name
        echo "::set-output name=tag_name::$(echo $tag_name)"

    - name: Create Release
      id: create-release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create-tag.outputs.tag_name }}
        release_name: ${{ env.RELEASE_NAME_PREFIX }}${{ steps.generate-dev-log.outputs.prerelease_version }}
        body: |
          ${{ steps.generate-dev-log.outputs.release_log }}
        draft: false
        prerelease: false

    - id: start-new-version
      name: Start new version
      run: |

        # 版本已发布，此时取出的预发布版本是最新版本
        latest_version=$( echo "${{ steps.generate-dev-log.outputs.prerelease_version }}" )
        echo "🔥️ latest_version -> $latest_version"

        next_version=$( python scripts/workflows/release/version_increment.py --version "$latest_version" )
        echo "⬇️ next_version -> $next_version"

        # 检出新开发分支
        dev_branch_name=$( echo "${next_version}${{ env.DEV_BRANCH_SUFFIX }}" )
        echo "🌿 dev_branch_name -> $dev_branch_name"
        git checkout -b "$dev_branch_name"

        # 创建新开发版本的开发日志目录
        next_version_dev_log_dir_path=$(echo "${{ env.DEV_LOG_ROOT }}/$next_version" )
        echo "📖 next_version_dev_log_dir_path -> $next_version_dev_log_dir_path"
        mkdir -p "$next_version_dev_log_dir_path"
        touch "$next_version_dev_log_dir_path/.gitkeep"

        # 推送到仓库
        git add .
        git commit -m "minor: start new version $next_version"
        git push origin "$dev_branch_name"
        echo "✨️ dev_branch -> $dev_branch_name has been created"

    - id: celebrate
      name: Celebrate
      run: |
        echo "🎉 Worth celebrating"
        echo "🍻 All steps are successfully completed"
        echo "👋 Goodbye!"
